{
  "scripts": {
    "build-demo": "node scripts/build-demo.js",
    "qunit": "node scripts/server.js",
    "jshint": "node node_modules/jshint/bin/jshint purify.js || true",
    "test": "npm run jshint;npm run qunit"
  },
  "devDependencies": {
    "qunitjs": "^1.14.0",
    "qunit-parameterize": "^0.4.0",
    "jshint": "^2.4.4"
  },
  "name": "dompurify",
  "description": "DOMPurify is a DOM-only, super-fast, uber-tolerant XSS sanitizer for HTML, MathML and SVG. It's written in JavaScript and works in all modern browsers (Safari, Opera (15+), Internet Explorer (9+), Firefox and Chrome - as well as almost anything else using Blink or WebKit). DOMPurify is written by security people who have vast background in web attacks and XSS. Fear not.",
  "version": "0.4.2",
  "main": "purify.js",
  "directories": {
    "test": "test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/cure53/DOMPurify.git"
  },
  "keywords": [
    "dom",
    "xss",
    "html",
    "svg",
    "mathml",
    "security",
    "secure",
    "sanitizer",
    "sanitize",
    "filter",
    "purify"
  ],
  "author": {
    "name": "Mario Heiderich",
    "email": "mario@cure53.de",
    "url": "https://cure53.de/"
  },
  "license": "MPL",
  "bugs": {
    "url": "https://github.com/cure53/DOMPurify/issues"
  },
  "homepage": "https://github.com/cure53/DOMPurify",
  "readme": "# DOMPurify\n\nDOMPurify is a DOM-only, super-fast, uber-tolerant XSS sanitizer for HTML, MathML and SVG. It's written in JavaScript and works in all modern browsers (Safari, Opera (15+), Internet Explorer (9+), Firefox and Chrome - as well as almost anything else using Blink or WebKit). DOMPurify is written by security people who have vast background in web attacks and XSS. Fear not.\n\n## What does it do?\n\nDOMPurify sanitizes HTML and prevents XSS attacks. You can feed DOMPurify with string full of dirty HTML and it will return a string with clean HTML. DOMPurify will strip out everything that contains dangerous HTML and thereby prevent XSS attacks and other nastiness. It's also damn bloody fast. We use the technologies the browser provides and turn them into an XSS filter. The faster your browser, the faster DOMPurify will be.\n\n## How do I use it?\n\nIt's easy. Just include DOMPurify on your website. \n\n```html\n<script type=\"text/javascript\" src=\"purify.js\"></script>\n```\n\nAfterwards you can sanitize strings by executing the following code:\n\n```javascript\nvar clean = DOMPurify.sanitize(dirty);\n```\n\nIf you're using an [AMD](https://github.com/amdjs/amdjs-api/wiki/AMD) module loader like [Require.js](http://requirejs.org/), you can load this script asynchronously as well:\n\n```javascript\nrequire(['dompurify'], function(DOMPurify) {\n    var clean = DOMPurify.sanitize(dirty);\n};\n```\n\nYou can also grab the files straight from NPM:\n\n```\nnpm install dompurify\n```\n\n## Is there a demo?\n\nOf course there is a demo! [Play with DOMPurify](https://cure53.de/purify)\n\n## Some samples please?\n\nHow does purified markup look like? Well, [the demo](https://cure53.de/purify) shows it for a big bunch of nasty elements. But let's also show some smaller examples!\n\n```javascript\nDOMPurify.sanitize('<img src=x onerror=alert(1)//>'); // becomes <img src=\"x\">\nDOMPurify.sanitize('<svg><g/onload=alert(2)//<p>'); // becomes <svg><g></g></svg>\nDOMPurify.sanitize('<p>abc<iframe/\\/src=jAva&Tab;script:alert(3)>def'); // becomes <p>abc</p>\nDOMPurify.sanitize('<math><mi//xlink:href=\"data:x,<script>alert(4)</script>\">'); // becomes <math></math>\n\nDOMPurify.sanitize('<TABLE><tr><td>HELLO</tr></TABL>'); // becomes <table><tbody><tr><td>HELLO</td></tr></tbody></table>\nDOMPurify.sanitize('<UL><li><A HREF=//google.com>click</UL>'); // becomes <ul><li><a href=\"//google.com\">click</a></li></ul>\n```\n\n## What is supported?\n\nDOMPurify currently supports HTML5, SVG and MathML. DOMPurify per default allows CSS, HTML custom data attributes. DOMPurify also supports the Shadow DOM - and sanitizes DOM templates recursively. DOMPurify also allows you to sanitize HTML for being used with the jQuery `$()` and `elm.html()` methods.\n\n## Can I configure it?\n\nYes. The included default configuration values are pretty good already - but you can of course override them:\n\n```javascript\n// allow only <b>\nvar clean = DOMPurify.sanitize(dirty, {ALLOWED_TAGS: ['b']});\n\n// allow only <b> and <q> with style attributes (for whatever reason)\nvar clean = DOMPurify.sanitize(dirty, {ALLOWED_TAGS: ['b', 'q'], ALLOWED_ATTR: ['style']});\n\n// extend the existing array of allowed tags\nvar clean = DOMPurify.sanitize(dirty, {ADD_TAGS: ['my-tag']});\n\n// extend the existing array of attributes\nvar clean = DOMPurify.sanitize(dirty, {ADD_ATTR: ['my-attr']});\n\n// prohibit HTML5 data attributes (default is true)\nvar clean = DOMPurify.sanitize(dirty, {ALLOW_DATA_ATTR: false});\n\n// return a DOM instead of an HTML string (default is false)\nvar clean = DOMPurify.sanitize(dirty, {RETURN_DOM: true});\n\n// return entire document including <html> tags (default is false)\nvar clean = DOMPurify.sanitize(dirty, {WHOLE_DOCUMENT: true});\n\n// make output safe for usage in jQuery's $()/html() method (default is false)\nvar clean = DOMPurify.sanitize(dirty, {SAFE_FOR_JQUERY: true});\n\n// disable DOM Clobbering protection on output (default is true, handle with care!)\nvar clean = DOMPurify.sanitize(dirty, {SANITIZE_DOM: false});\n\n// discard an element's content when the element is removed (default is true)\nvar clean = DOMPurify.sanitize(dirty, {KEEP_CONTENT: false});\n```\n\n## Unit tests\n\nTo run the test suite, you need [Node.js](http://nodejs.org/download/) first. Install the dependencies with `npm install`, then start the test server with `npm test`. You can run the tests in your browser from **http://localhost:8000/test/**.\n\n## What's on the road-map?\n\nStill a lot of things although we have come far feature-wise. We're currently considering to build a CSS module, that cleans up inside `<style>` elements - and not only `style` attributes. Future versions will also, most likely, reliably prevent leakage via HTTP requests, proxy HTTP requests etc. etc.\n\n## Who contributed?\n\nSeveral people need to be listed here! [@garethheyes](https://twitter.com/garethheyes) for invaluable help, [@shafigullin](https://twitter.com/shafigullin) for breaking the library multiple times and thereby strengthening it, [@mmrupp](https://twitter.com/mmrupp) and [@irsdl](https://twitter.com/irsdl) for doing the same. Big thanks also go to [@mathias](https://twitter.com/mathias), [@cgvwzq](https://twitter.com/cgvwzq), [@robbertatwork](https://twitter.com/robbertatwork), [@giutro](https://twitter.com/giutro) and [@fhemberger](https://twitter.com/fhemberger)!\n",
  "readmeFilename": "README.md",
  "_id": "dompurify@0.4.2",
  "dist": {
    "shasum": "dfb6e9bfbb099ed94aa7095182b6f103f4addfe1"
  },
  "_from": "dompurify@",
  "_resolved": "https://registry.npmjs.org/dompurify/-/dompurify-0.4.2.tgz"
}
